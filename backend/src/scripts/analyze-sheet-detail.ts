/**
 * ÌäπÏ†ï ÏãúÌä∏Ïùò ÏÉÅÏÑ∏ Íµ¨Ï°∞ Î∂ÑÏÑù
 */

import * as XLSX from 'xlsx'
import * as fs from 'fs'
import * as path from 'path'

async function analyzeSheet() {
	const filePath = path.resolve('F:\\GOI\\ÌòÑÏû•Î≥ÑÏã§ÌñâÎÇ¥Ïó≠ÏÑú.xlsx')

	try {
		const buffer = fs.readFileSync(filePath)
		const workbook = XLSX.read(buffer, {
			type: 'buffer',
			codepage: 65001
		})

		// Ï≤´ Î≤àÏß∏ ÏãúÌä∏ ÏÉÅÏÑ∏ Î∂ÑÏÑù
		const sheetName = workbook.SheetNames[0]
		const worksheet = workbook.Sheets[sheetName]

		console.log(`üîç Detailed analysis of: "${sheetName}"\n`)

		// JSON Î≥ÄÌôò (Ìó§Îçî ÏóÜÏù¥)
		const data = XLSX.utils.sheet_to_json(worksheet, {
			raw: false,
			defval: null,
			header: 1 // Î∞∞Ïó¥Î°ú Î∞òÌôò
		})

		console.log(`Total rows: ${data.length}\n`)

		// Ï≤òÏùå 20ÌñâÎßå Ï∂úÎ†•
		console.log('üìã First 20 rows:\n')
		data.slice(0, 20).forEach((row: any, idx) => {
			console.log(`Row ${idx + 1}:`, row)
		})

		console.log('\n' + '='.repeat(80))
		console.log('\nüîç Looking for patterns...\n')

		// Ìï≠Î™© Ï∞æÍ∏∞
		const itemRows: any[] = []
		data.forEach((row: any, idx) => {
			const firstCell = row[0]
			if (firstCell && typeof firstCell === 'string') {
				// Ïà´ÏûêÎÇò ÌäπÏ†ï Ìå®ÌÑ¥Ïù¥ ÏûàÎäî Ìñâ Ï∞æÍ∏∞
				if (
					firstCell.includes('Ï≤†Í±∞') ||
					firstCell.includes('Î™©Í≥µ') ||
					firstCell.includes('Ï†ÑÍ∏∞') ||
					firstCell.includes('ÌÉÄÏùº') ||
					firstCell.includes('ÎèÑÎ∞∞') ||
					firstCell.includes('ÏàòÎèÑ') ||
					firstCell.includes('ÏÑ§ÎπÑ') ||
					/^\d+\./.test(firstCell) // "1.", "2." Í∞ôÏùÄ Î≤àÌò∏
				) {
					itemRows.push({ row: idx + 1, data: row })
				}
			}
		})

		if (itemRows.length > 0) {
			console.log(`‚úÖ Found ${itemRows.length} potential item rows:\n`)
			itemRows.slice(0, 10).forEach(({ row, data }) => {
				console.log(`Row ${row}:`, data)
			})
		}

	} catch (error) {
		console.error('‚ùå Error:', error)
		process.exit(1)
	}
}

analyzeSheet()
