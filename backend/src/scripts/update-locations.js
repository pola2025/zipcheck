const { pool } = require('../../dist/lib/db.js');

// ÏúÑÏπò Ï∂îÏ∂ú Ìï®Ïàò
const locationPatterns = [
  { keyword: 'Ï£ºÎ∞©', exclude: [] },
  { keyword: 'Í±∞Ïã§', exclude: [] },
  { keyword: 'ÏïàÎ∞©', exclude: [] },
  { keyword: 'ÌôîÏû•Ïã§', exclude: [] },
  { keyword: 'ÏöïÏã§', exclude: [] },
  { keyword: 'Î≤†ÎûÄÎã§', exclude: [] },
  { keyword: 'Î∞úÏΩîÎãà', exclude: [] },
  { keyword: 'ÌòÑÍ¥Ä', exclude: [] },
  { keyword: 'Î≥µÎèÑ', exclude: [] },
  { keyword: 'ÎìúÎ†àÏä§Î£∏', exclude: [] },
  { keyword: 'ÏÑúÏû¨', exclude: [] },
  { keyword: 'Ï∞ΩÍ≥†', exclude: [] },
  { keyword: 'Îã§Ïö©ÎèÑÏã§', exclude: [] },
  { keyword: 'Î∞©', exclude: ['Î∞©Ïàò', 'Î∞©Î¨∏', 'Î∞©Ï∂©', 'Î∞©Ïùå', 'Î∞©Î≤î', 'Î∞©Ïó¥'] }
];

function extractLocation(text) {
  if (!text) return null;

  for (const pattern of locationPatterns) {
    // Ï†úÏô∏ Ìå®ÌÑ¥ Ï≤¥ÌÅ¨
    if (pattern.exclude.some(ex => text.includes(ex))) {
      continue;
    }
    // ÌÇ§ÏõåÎìú Ï≤¥ÌÅ¨
    if (text.includes(pattern.keyword)) {
      return pattern.keyword;
    }
  }
  return null;
}

function extractBaseName(itemName, location) {
  if (!location) return itemName;
  return itemName.replace(location, '').trim();
}

async function updateLocations() {
  try {
    console.log('üìä Fetching all construction records...');

    // Î™®Îì† Î†àÏΩîÎìú Í∞ÄÏ†∏Ïò§Í∏∞
    const records = await pool.query(`
      SELECT cr.id, cr.raw_data, i.id as item_id, i.name as item_name
      FROM construction_records cr
      JOIN items i ON i.id = cr.item_id
    `);

    console.log(`Ï¥ù ${records.rows.length}Í∞ú Î†àÏΩîÎìú Ï≤òÎ¶¨ ÏãúÏûë...\n`);

    let updatedRecords = 0;
    let updatedItems = new Map(); // item_id -> { base_name, location }

    for (const record of records.rows) {
      const itemName = record.item_name;

      // Ìï≠Î™©Î™ÖÏóêÏÑú ÏúÑÏπò Ï∂îÏ∂ú
      const location = extractLocation(itemName);

      if (location) {
        // construction_records ÏóÖÎç∞Ïù¥Ìä∏
        await pool.query(`
          UPDATE construction_records
          SET location = $1
          WHERE id = $2
        `, [location, record.id]);

        updatedRecords++;

        // itemsÏùò base_name ÏóÖÎç∞Ïù¥Ìä∏ (Ï§ëÎ≥µ Î∞©ÏßÄ)
        if (!updatedItems.has(record.item_id)) {
          const baseName = extractBaseName(itemName, location);
          await pool.query(`
            UPDATE items
            SET base_name = $1
            WHERE id = $2
          `, [baseName, record.item_id]);

          updatedItems.set(record.item_id, { baseName, location });
        }

        if (updatedRecords % 50 === 0) {
          console.log(`  ÏßÑÌñâ Ï§ë... ${updatedRecords}Í∞ú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å`);
        }
      }
    }

    console.log(`\n‚úÖ ÏôÑÎ£å!`);
    console.log(`  - Construction Records ÏóÖÎç∞Ïù¥Ìä∏: ${updatedRecords}Í∞ú`);
    console.log(`  - Items base_name ÏóÖÎç∞Ïù¥Ìä∏: ${updatedItems.size}Í∞ú`);

    // ÌÜµÍ≥Ñ ÌôïÏù∏
    const stats = await pool.query(`
      SELECT location, COUNT(*) as count
      FROM construction_records
      WHERE location IS NOT NULL
      GROUP BY location
      ORDER BY count DESC
    `);

    console.log('\nüìä ÏúÑÏπòÎ≥Ñ Î†àÏΩîÎìú Í∞úÏàò:');
    stats.rows.forEach(row => {
      console.log(`  ${row.location}: ${row.count}Í∞ú`);
    });

    process.exit(0);
  } catch (err) {
    console.error('‚ùå Error:', err);
    process.exit(1);
  }
}

updateLocations();
