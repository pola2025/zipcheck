/**
 * ÌòÑÏû•Î≥Ñ Ïã§ÌñâÎÇ¥Ïó≠ÏÑúÎ•º DBÏóê ÏßÅÏ†ë ÏóÖÎ°úÎìúÌïòÎäî Ïä§ÌÅ¨Î¶ΩÌä∏
 */

import * as fs from 'fs'
import * as path from 'path'
import { uploadConstructionSheets } from '../services/data-upload'

async function uploadSheets() {
	const filePath = path.resolve('F:\\GOI\\ÌòÑÏû•Î≥ÑÏã§ÌñâÎÇ¥Ïó≠ÏÑú.xlsx')

	console.log('üìÇ Uploading Construction Sheets to Database...')
	console.log(`üìÅ File: ${filePath}\n`)

	try {
		const buffer = fs.readFileSync(filePath)

		// Multer ÌååÏùº Í∞ùÏ≤¥ Î™®Î∞©
		const file = {
			buffer,
			originalname: 'ÌòÑÏû•Î≥ÑÏã§ÌñâÎÇ¥Ïó≠ÏÑú.xlsx',
			size: buffer.length,
			mimetype: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
			fieldname: 'file',
			encoding: '7bit',
			destination: '',
			filename: '',
			path: ''
		} as Express.Multer.File

		console.log('üîÑ Uploading to database...\n')

		const result = await uploadConstructionSheets(file)

		console.log('\n' + '='.repeat(80))
		console.log('‚úÖ Upload completed!\n')
		console.log(`üìä Results:`)
		console.log(`   - Total Rows: ${result.totalRows}`)
		console.log(`   - Success: ${result.successRows}`)
		console.log(`   - Errors: ${result.errorRows}`)

		if (result.errors.length > 0) {
			console.log(`\n‚ö†Ô∏è  Errors (first 10):`)
			result.errors.slice(0, 10).forEach(err => {
				console.log(`   - Row ${err.row}: ${err.message}`)
			})
		}

		console.log('='.repeat(80))

	} catch (error) {
		console.error('‚ùå Upload failed:', error)
		if (error instanceof Error) {
			console.error('Stack:', error.stack)
		}
		process.exit(1)
	} finally {
		// Close database connection
		process.exit(0)
	}
}

uploadSheets()
